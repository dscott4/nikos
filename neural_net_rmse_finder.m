function [testPerformance] = neural_net_rmse_finder(hiddenLayerSize,X,T,trainRatio)
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 18-Oct-2017 14:03:05
%
% This script assumes these variables are defined:
%
%   X - input data.
%   T - target data.
[m,n] = size(X);

x = X';
t = T';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr';  % Bayesian Regularisation.

% Create a Fitting Network
%hiddenLayerSize = [8, 8, 8];

net = fitnet(hiddenLayerSize,trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Increase maximum number of epochs
net.trainParam.epochs = 10000;

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
[trainInd,testInd] = create_test_train_indices(m,trainRatio);

net.divideFcn = 'divideind';  % Divide data by indices
net.divideParam.trainInd = trainInd;
net.divideParam.testInd = testInd;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y);

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
testTargets = t .* tr.testMask{1};

trainPerformance = perform(net,trainTargets,y);
testPerformance = perform(net,testTargets,y);

end
